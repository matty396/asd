{
  "_args": [
    [
      {
        "raw": "@vitejs/plugin-vue@^4.0.0",
        "scope": "@vitejs",
        "escapedName": "@vitejs%2fplugin-vue",
        "name": "@vitejs/plugin-vue",
        "rawSpec": "^4.0.0",
        "spec": ">=4.0.0 <5.0.0",
        "type": "range"
      },
      "E:\\workspace_laravel\\control-stock"
    ]
  ],
  "_from": "@vitejs/plugin-vue@^4.0.0",
  "_hasShrinkwrap": false,
  "_id": "@vitejs/plugin-vue@4.4.0",
  "_integrity": "sha512-xdguqb+VUwiRpSg+nsc2HtbAUSGak25DXYvpQQi4RVU1Xq1uworyoH/md9Rfd8zMmPR/pSghr309QNcftUVseg==",
  "_location": "/@vitejs/plugin-vue",
  "_nodeVersion": "18.17.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/plugin-vue_4.4.0_1696255321186_0.5175026818642061"
  },
  "_npmUser": {
    "name": "soda",
    "email": "npm@haoqun.me"
  },
  "_npmVersion": "10.0.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@vitejs/plugin-vue@^4.0.0",
    "scope": "@vitejs",
    "escapedName": "@vitejs%2fplugin-vue",
    "name": "@vitejs/plugin-vue",
    "rawSpec": "^4.0.0",
    "spec": ">=4.0.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/@vitejs/plugin-vue/-/plugin-vue-4.4.0.tgz",
  "_shasum": "8ae96573236cdb12de6850a6d929b5537ec85390",
  "_shrinkwrap": null,
  "_spec": "@vitejs/plugin-vue@^4.0.0",
  "_where": "E:\\workspace_laravel\\control-stock",
  "author": {
    "name": "Evan You"
  },
  "bugs": {
    "url": "https://github.com/vitejs/vite-plugin-vue/issues"
  },
  "dependencies": {},
  "description": "> Note: as of `vue` 3.2.13+ and `@vitejs/plugin-vue` 1.9.0+, `@vue/compiler-sfc` is no longer required as a peer dependency.",
  "devDependencies": {
    "@jridgewell/gen-mapping": "^0.3.3",
    "@jridgewell/trace-mapping": "^0.3.19",
    "debug": "^4.3.4",
    "rollup": "^3.17.2",
    "slash": "^5.1.0",
    "source-map-js": "^1.0.2",
    "vite": "^4.4.9",
    "vue": "^3.3.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-xdguqb+VUwiRpSg+nsc2HtbAUSGak25DXYvpQQi4RVU1Xq1uworyoH/md9Rfd8zMmPR/pSghr309QNcftUVseg==",
    "shasum": "8ae96573236cdb12de6850a6d929b5537ec85390",
    "tarball": "https://registry.npmjs.org/@vitejs/plugin-vue/-/plugin-vue-4.4.0.tgz",
    "fileCount": 9,
    "unpackedSize": 264920,
    "signatures": [
      {
        "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
        "sig": "MEUCICrH04weO9RgofJrB4BmbxPz2KQ417nOfPH3ed62G/41AiEAj8eL36RN3wghemMsPl6XBKN/sb2iVGi0+q0iP9jBHRM="
      }
    ]
  },
  "engines": {
    "node": "^14.18.0 || >=16.0.0"
  },
  "exports": {
    ".": {
      "import": "./dist/index.mjs",
      "require": "./dist/index.cjs"
    }
  },
  "files": [
    "dist"
  ],
  "homepage": "https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#readme",
  "license": "MIT",
  "main": "./dist/index.cjs",
  "maintainers": [
    {
      "name": "soda",
      "email": "npm@haoqun.me"
    },
    {
      "name": "vitebot",
      "email": "vitejs.twitter@gmail.com"
    },
    {
      "name": "yyx990803",
      "email": "yyx990803@gmail.com"
    },
    {
      "name": "patak",
      "email": "matias.capeletto@gmail.com"
    },
    {
      "name": "antfu",
      "email": "anthonyfu117@hotmail.com"
    },
    {
      "name": "sxzz",
      "email": "sxzz@sxzz.moe"
    }
  ],
  "module": "./dist/index.mjs",
  "name": "@vitejs/plugin-vue",
  "optionalDependencies": {},
  "peerDependencies": {
    "vite": "^4.0.0",
    "vue": "^3.2.25"
  },
  "readme": "# @vitejs/plugin-vue [![npm](https://img.shields.io/npm/v/@vitejs/plugin-vue.svg)](https://npmjs.com/package/@vitejs/plugin-vue)\n\n> Note: as of `vue` 3.2.13+ and `@vitejs/plugin-vue` 1.9.0+, `@vue/compiler-sfc` is no longer required as a peer dependency.\n\n```js\n// vite.config.js\nimport vue from '@vitejs/plugin-vue'\n\nexport default {\n  plugins: [vue()],\n}\n```\n\nFor JSX / TSX support, [`@vitejs/plugin-vue-jsx`](https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue-jsx) is also needed.\n\n## Options\n\n```ts\nexport interface Options {\n  include?: string | RegExp | (string | RegExp)[]\n  exclude?: string | RegExp | (string | RegExp)[]\n\n  isProduction?: boolean\n\n  // options to pass on to vue/compiler-sfc\n  script?: Partial<\n    Pick<\n      SFCScriptCompileOptions,\n      | 'babelParserPlugins'\n      | 'globalTypeFiles'\n      | 'defineModel'\n      | 'propsDestructure'\n      | 'fs'\n      | 'reactivityTransform'\n    >\n  >\n\n  template?: Partial<\n    Pick<\n      SFCTemplateCompileOptions,\n      | 'compiler'\n      | 'compilerOptions'\n      | 'preprocessOptions'\n      | 'preprocessCustomRequire'\n      | 'transformAssetUrls'\n    >\n  >\n  style?: Partial<Pick<SFCStyleCompileOptions, 'trim'>>\n\n  /**\n   * Transform Vue SFCs into custom elements.\n   * - `true`: all `*.vue` imports are converted into custom elements\n   * - `string | RegExp`: matched files are converted into custom elements\n   *\n   * @default /\\.ce\\.vue$/\n   */\n  customElement?: boolean | string | RegExp | (string | RegExp)[]\n\n  /**\n   * Enable Vue reactivity transform (experimental).\n   * https://vuejs.org/guide/extras/reactivity-transform.html\n   * - `true`: transform will be enabled for all vue,js(x),ts(x) files except\n   *           those inside node_modules\n   * - `string | RegExp`: apply to vue + only matched files (will include\n   *                      node_modules, so specify directories if necessary)\n   * - `false`: disable in all cases\n   *\n   * @default false\n   */\n  reactivityTransform?: boolean | string | RegExp | (string | RegExp)[]\n\n  /**\n   * Use custom compiler-sfc instance. Can be used to force a specific version.\n   */\n  compiler?: typeof _compiler\n}\n```\n\n## Asset URL handling\n\nWhen `@vitejs/plugin-vue` compiles the `<template>` blocks in SFCs, it also converts any encountered asset URLs into ESM imports.\n\nFor example, the following template snippet:\n\n```vue\n<img src=\"../image.png\" />\n```\n\nIs the same as:\n\n```vue\n<script setup>\nimport _imports_0 from '../image.png'\n</script>\n\n<img :src=\"_imports_0\" />\n```\n\nBy default the following tag/attribute combinations are transformed, and can be configured using the `template.transformAssetUrls` option.\n\n```js\n{\n  video: ['src', 'poster'],\n  source: ['src'],\n  img: ['src'],\n  image: ['xlink:href', 'href'],\n  use: ['xlink:href', 'href']\n}\n```\n\nNote that only attribute values that are static strings are transformed. Otherwise, you'd need to import the asset manually, e.g. `import imgUrl from '../image.png'`.\n\n## Example for passing options to `vue/compiler-sfc`:\n\n```ts\nimport vue from '@vitejs/plugin-vue'\n\nexport default {\n  plugins: [\n    vue({\n      template: {\n        compilerOptions: {\n          // ...\n        },\n        transformAssetUrls: {\n          // ...\n        },\n      },\n    }),\n  ],\n}\n```\n\n## Example for transforming custom blocks\n\n```ts\nimport vue from '@vitejs/plugin-vue'\nimport yaml from 'js-yaml'\n\nconst vueI18nPlugin = {\n  name: 'vue-i18n',\n  transform(code, id) {\n    // if .vue file don't have <i18n> block, just return\n    if (!/vue&type=i18n/.test(id)) {\n      return\n    }\n    // parse yaml\n    if (/\\.ya?ml$/.test(id)) {\n      code = JSON.stringify(yaml.load(code.trim()))\n    }\n    // mount the value on the i18n property of the component instance\n    return `export default Comp => {\n      Comp.i18n = ${code}\n    }`\n  },\n}\n\nexport default {\n  plugins: [vue(), vueI18nPlugin],\n}\n```\n\nCreate a file named `Demo.vue`, add `lang=\"yaml\"` to the `<i18n>` blocks, then you can use the syntax of `YAML`:\n\n```vue\n<template>Hello</template>\n\n<i18n lang=\"yaml\">\nmessage: 'world'\nfullWord: 'hello world'\n</i18n>\n```\n\n`message` is mounted on the i18n property of the component instance, you can use like this:\n\n```vue\n<script setup lang=\"ts\">\nimport Demo from 'components/Demo.vue'\n</script>\n\n<template>\n  <Demo /> {{ Demo.i18n.message }}\n  <div>{{ Demo.i18n.fullWord }}</div>\n</template>\n```\n\n## Using Vue SFCs as Custom Elements\n\n> Requires `vue@^3.2.0` & `@vitejs/plugin-vue@^1.4.0`\n\nVue 3.2 introduces the `defineCustomElement` method, which works with SFCs. By default, `<style>` tags inside SFCs are extracted and merged into CSS files during build. However when shipping a library of custom elements, it may be desirable to inline the styles as JavaScript strings and inject them into the custom elements' shadow root instead.\n\nStarting in 1.4.0, files ending with `*.ce.vue` will be compiled in \"custom elements\" mode: its `<style>` tags are compiled into inlined CSS strings and attached to the component as its `styles` property:\n\n```js\nimport { defineCustomElement } from 'vue'\nimport Example from './Example.ce.vue'\n\nconsole.log(Example.styles) // ['/* css content */']\n\n// register\ncustomElements.define('my-example', defineCustomElement(Example))\n```\n\nNote in custom elements mode there is no need to use `<style scoped>` since the CSS is already scoped inside the shadow DOM.\n\nThe `customElement` plugin option can be used to configure the behavior:\n\n- `{ customElement: true }` will import all `*.vue` files in custom element mode.\n- Use a string or regex pattern to change how files should be loaded as Custom Elements (this check is applied after `include` and `exclude` matches).\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vitejs/vite-plugin-vue.git",
    "directory": "packages/plugin-vue"
  },
  "scripts": {
    "build": "unbuild && pnpm run patch-cjs",
    "dev": "unbuild --stub",
    "patch-cjs": "tsx ../../scripts/patchCJS.ts"
  },
  "types": "./dist/index.d.ts",
  "version": "4.4.0",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "pkgid": "@vitejs/plugin-vue@4.4.0"
    }
  ]
}
