{
  "_args": [
    [
      {
        "raw": "@vue/reactivity-transform@3.3.7",
        "scope": "@vue",
        "escapedName": "@vue%2freactivity-transform",
        "name": "@vue/reactivity-transform",
        "rawSpec": "3.3.7",
        "spec": "3.3.7",
        "type": "version"
      },
      "E:\\workspace_laravel\\control-stock\\node_modules\\@vue\\compiler-sfc"
    ]
  ],
  "_from": "@vue/reactivity-transform@3.3.7",
  "_hasShrinkwrap": false,
  "_id": "@vue/reactivity-transform@3.3.7",
  "_integrity": "sha512-APhRmLVbgE1VPGtoLQoWBJEaQk4V8JUsqrQihImVqKT+8U6Qi3t5ATcg4Y9wGAPb3kIhetpufyZ1RhwbZCIdDA==",
  "_location": "/@vue/reactivity-transform",
  "_nodeVersion": "20.8.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/reactivity-transform_3.3.7_1698190534000_0.4243557023396407"
  },
  "_npmUser": {
    "name": "yyx990803",
    "email": "yyx990803@gmail.com"
  },
  "_npmVersion": "10.1.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@vue/reactivity-transform@3.3.7",
    "scope": "@vue",
    "escapedName": "@vue%2freactivity-transform",
    "name": "@vue/reactivity-transform",
    "rawSpec": "3.3.7",
    "spec": "3.3.7",
    "type": "version"
  },
  "_requiredBy": [
    "/@vue/compiler-sfc"
  ],
  "_resolved": "https://registry.npmjs.org/@vue/reactivity-transform/-/reactivity-transform-3.3.7.tgz",
  "_shasum": "eb9f5110af5085079b851d162205394bc790d539",
  "_shrinkwrap": null,
  "_spec": "@vue/reactivity-transform@3.3.7",
  "_where": "E:\\workspace_laravel\\control-stock\\node_modules\\@vue\\compiler-sfc",
  "author": {
    "name": "Evan You"
  },
  "bugs": {
    "url": "https://github.com/vuejs/core/issues"
  },
  "buildOptions": {
    "formats": [
      "cjs"
    ],
    "prod": false
  },
  "dependencies": {
    "@babel/parser": "^7.23.0",
    "@vue/compiler-core": "3.3.7",
    "@vue/shared": "3.3.7",
    "estree-walker": "^2.0.2",
    "magic-string": "^0.30.5"
  },
  "description": "@vue/reactivity-transform",
  "devDependencies": {
    "@babel/core": "^7.23.2",
    "@babel/types": "^7.23.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-APhRmLVbgE1VPGtoLQoWBJEaQk4V8JUsqrQihImVqKT+8U6Qi3t5ATcg4Y9wGAPb3kIhetpufyZ1RhwbZCIdDA==",
    "shasum": "eb9f5110af5085079b851d162205394bc790d539",
    "tarball": "https://registry.npmjs.org/@vue/reactivity-transform/-/reactivity-transform-3.3.7.tgz",
    "fileCount": 5,
    "unpackedSize": 24291,
    "signatures": [
      {
        "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
        "sig": "MEYCIQC/icIhoSpjVEGhnYlNdbh2IDNVYq3ZMlN3ErcPAKwM0QIhAKl0HbIG75mD/dW2LzZ1xUkuOhV8GVKvNBs1zd0EaBx/"
      }
    ]
  },
  "files": [
    "dist"
  ],
  "homepage": "https://github.com/vuejs/core/tree/dev/packages/reactivity-transform#readme",
  "keywords": [
    "vue"
  ],
  "license": "MIT",
  "main": "dist/reactivity-transform.cjs.js",
  "maintainers": [
    {
      "name": "yyx990803",
      "email": "yyx990803@gmail.com"
    }
  ],
  "name": "@vue/reactivity-transform",
  "optionalDependencies": {},
  "readme": "# @vue/reactivity-transform\n\n> ⚠️ This is experimental and the proposal has been dropped.\n> The feature is now marked as deprecated and will be removed from Vue core\n> in 3.4.\n>\n> See reason for deprecation [here](https://github.com/vuejs/rfcs/discussions/369#discussioncomment-5059028).\n\n## Basic Rules\n\n- Ref-creating APIs have `$`-prefixed versions that create reactive variables instead. They also do not need to be explicitly imported. These include:\n  - `ref`\n  - `computed`\n  - `shallowRef`\n  - `customRef`\n  - `toRef`\n- `$()` can be used to destructure an object into reactive variables, or turn existing refs into reactive variables\n- `$$()` to \"escape\" the transform, which allows access to underlying refs\n\n```js\nimport { watchEffect } from 'vue'\n\n// bind ref as a variable\nlet count = $ref(0)\n\nwatchEffect(() => {\n  // no need for .value\n  console.log(count)\n})\n\n// assignments are reactive\ncount++\n\n// get the actual ref\nconsole.log($$(count)) // { value: 1 }\n```\n\nMacros can be optionally imported to make it more explicit:\n\n```js\n// not necessary, but also works\nimport { $, $ref } from 'vue/macros'\n\nlet count = $ref(0)\nconst { x, y } = $(useMouse())\n```\n\n### Global Types\n\nTo enable types for the macros globally, include the following in a `.d.ts` file:\n\n```ts\n/// <reference types=\"vue/macros-global\" />\n```\n\n## API\n\nThis package is the lower-level transform that can be used standalone. Higher-level tooling (e.g. `@vitejs/plugin-vue` and `vue-loader`) will provide integration via options.\n\n### `shouldTransform`\n\nCan be used to do a cheap check to determine whether full transform should be performed.\n\n```js\nimport { shouldTransform } from '@vue/reactivity-transform'\n\nshouldTransform(`let a = ref(0)`) // false\nshouldTransform(`let a = $ref(0)`) // true\n```\n\n### `transform`\n\n```js\nimport { transform } from '@vue/reactivity-transform'\n\nconst src = `let a = $ref(0); a++`\nconst {\n  code, // import { ref as _ref } from 'vue'; let a = (ref(0)); a.value++\"\n  map\n} = transform(src, {\n  filename: 'foo.ts',\n  sourceMap: true,\n\n  // @babel/parser plugins to enable.\n  // 'typescript' and 'jsx' will be auto-inferred from filename if provided,\n  // so in most cases explicit parserPlugins are not necessary\n  parserPlugins: [\n    /* ... */\n  ]\n})\n```\n\n**Options**\n\n```ts\ninterface RefTransformOptions {\n  filename?: string\n  sourceMap?: boolean // default: false\n  parserPlugins?: ParserPlugin[]\n  importHelpersFrom?: string // default: \"vue\"\n}\n```\n\n### `transformAST`\n\nTransform with an existing Babel AST + MagicString instance. This is used internally by `@vue/compiler-sfc` to avoid double parse/transform cost.\n\n```js\nimport { transformAST } from '@vue/reactivity-transform'\nimport { parse } from '@babel/parser'\nimport MagicString from 'magic-string'\n\nconst src = `let a = $ref(0); a++`\nconst ast = parse(src, { sourceType: 'module' })\nconst s = new MagicString(src)\n\nconst {\n  rootRefs, // ['a']\n  importedHelpers // ['ref']\n} = transformAST(ast, s)\n\nconsole.log(s.toString()) // let a = _ref(0); a.value++\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vuejs/core.git",
    "directory": "packages/reactivity-transform"
  },
  "types": "dist/reactivity-transform.d.ts",
  "version": "3.3.7"
}
